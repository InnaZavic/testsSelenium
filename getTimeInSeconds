/**
*  @group testGroup/green/CI
*/

import { WebDriver, By, until } from 'selenium-webdriver';
import { getDescribe } from '../../lib/getDescribe';
import { createRoomFromCP } from '../../lib/rooms';
import { switchBrowserTab } from '../../lib/tab';
import { clickButton, clickButtonCss, clickToggleOnPlaybackMenu } from '../../lib/click';
import { addMedia, verifyMediaPlayingInRoom } from '../../lib/media';
import sleep from 'sleep-promise';
import { waitElementsLengthIs, waitElementDisplayed, waitChildElementsLengthIs } from '../../lib/wait';
import { verifyParticipantsInRoom, verifyToggleOnOff } from '../../lib/verify';
import { mouseHover, rightClick } from '../../lib/utils';

const globalAny = (global as any);
const roomName = 'TC30-6-12';
const video = 'big_buck_bunny.mp4'
const secondVideo = 'sampleVideo.mp4';
let timeToPlayNum: string; // Explicitly define the type

//function to convert time from mm:ss to seconds
function getTimeInSeconds(time: string) {
  const [minutes, seconds] = time.split(':');
  return parseInt(minutes) * 60 + parseInt(seconds);
};




 

jest.setTimeout(600000);

getDescribe(globalAny.BROWSER, 'MEDIA PLAYBACK BAR', [roomName], (driver : WebDriver) => {

  describe('TC30.6.12.2.1: Playback speed', () => {
    it('should click on Play button', async () => {
      await switchBrowserTab(driver, 1);
      await mouseHover(driver, 'canvas[id="WhiteboardLayer"]');
      await clickButton(driver, 'RoundedPlayPause');
    });

    it('should open speed menu', async () => {
      await clickButton( driver, 'PlaybackSpeedMenu');
      await waitElementDisplayed(driver, '[data-test-id="playbackSpeedMenuItems"]');
    });

    it('should select a new speed (0.25x, 0.5x, 1x, 1.5x)', async () => {
      const speeds = [1.5, 0.5, 0.25, 1];
      for (const speed of speeds) {
        await clickButtonCss(driver, `[data-test-id="playbackSpeed:${speed}"]`);
        // verify if the speed menu closed
        await waitElementsLengthIs(driver, '[data-test-id="playbackSpeedMenuItems"]', 0);
        await clickButton(driver, 'PlaybackSpeedMenu');
      }
    });

    it('should verify if speed updated with 2x', async () => {
      //stop video
      await clickButton(driver, 'RoundedPlayPause');
      await clickButton(driver, 'PlaybackSpeedMenu');
      await clickButtonCss(driver, '[data-test-id="playbackSpeed:2"]');
      const timeRemaine = await driver.findElement(By.css('[data-test-id="TimeIndicator"]')).getText();
      const timeRemaineSeconds = getTimeInSeconds(timeRemaine);
      await clickButton(driver, 'RoundedPlayPause');
      await sleep(3000);
      await clickButton(driver, 'RoundedPlayPause');
      const timeRemaineAfter = await driver.findElement(By.css('[data-test-id="TimeIndicator"]')).getText();
      const timeRemaineAfterSeconds = getTimeInSeconds(timeRemaineAfter);
      expect(timeRemaineAfterSeconds-timeRemaineSeconds===6);
      //pick 1x for futher tests
      await clickButton(driver, 'PlaybackSpeedMenu');
      await clickButtonCss(driver, `[data-test-id="playbackSpeed:1"]`);
    });

  });

describe('TC30.6.12.4: Volume Control: host', () => {

    it('should start the video', async () => {
      //hover on video to see playback bar elements
      await clickButton(driver, 'RoundedPlayPause');
      const videoAutoplay = await driver.findElements(By.css('video[src]'));
      const autoplay = await videoAutoplay[0].getAttribute('autoplay');
      if(autoplay===null){
        await clickButton(driver, 'RoundedPlayPause');
      }
      await verifyMediaPlayingInRoom(driver, true);
    });

    it('should reduce the volume with the control on the bar', async () => {
      //hover on speaker button on playback bar
      await mouseHover(driver, '[data-test-button="VolumeButton"]');
      const seekbar = await driver.wait(until.elementLocated(By.css('[data-test-id="playbackBarLive"]')), 10000);
      const seekbarVolumeSlider = await seekbar.findElement(By.css('[data-test-id="volumeSlider"]'));
      const actions = driver.actions();
      await actions.dragAndDrop(seekbarVolumeSlider,{ x:2,y:0 }).perform();
    });
    //user side should not be affected
});


  describe('TC30.6.12.4.3: Mute video on playback bar', () => {

    it('should click on the speaker icon', async () => {
      await clickButton(driver, 'VolumeButton');
    });

    it('should verify if the speaker icon is muted', async () => {
      const volumeMute = await driver.wait(until.elementLocated(By.css('[data-test-button="VolumeButton"]')), 10000);
      const volumeMuteClass = await volumeMute.getAttribute('class');
      const isMuted = volumeMuteClass.includes('muted-100');
      expect(isMuted).toBe(true);
      await waitElementDisplayed(driver, '[data-test-svg="VolumeButtonMuted"]');
  });
  
    it('video should be muted locally, verify if the speaker icon for the participant is unmuted', async () => {
      //go to the participant
      await switchBrowserTab(driver, 2);
      //should mute because without this the test will fail and show muted-100, but in reality it is not muted
      await mouseHover(driver, 'canvas[id="WhiteboardLayer"]')
      await mouseHover(driver, '[data-test-button="VolumeButton"]');
      await clickButton(driver, 'VolumeButton');
      //should unmute
      await clickButton(driver, 'VolumeButton');
      await waitElementDisplayed(driver, '[data-test-button="VolumeButton"]');
      const volumeUnmute = await driver.wait(until.elementLocated(By.css('[data-test-button="VolumeButton"]')), 10000);
      const volumeUnmuteClass = await volumeUnmute.getAttribute('class');
      const isUnMuted = volumeUnmuteClass.includes('bright-100');
      expect(isUnMuted).toBe(true);
    });

    it('should open the playback settings in the single content page (HCP)', async () => {
      await switchBrowserTab(driver, 1);
      await clickButtonCss(driver, '[data-test-id="mediaThumb"]');
      await waitElementDisplayed(driver, '[data-test-id="singleMediaInfo"]');
      await clickButton(driver, 'playbackSettings');
    });

    it('Global mute toggle should be disabled in the Playback settings', async () => {
      await verifyToggleOnOff( driver, 'mediaMute', false);
    });

    it('Global mute should be disabled in Context menu', async () => {
      await mouseHover(driver, 'canvas[id="WhiteboardLayer"]');
      await clickButton(driver, 'ThreeDotsMenuButton');
      //Global mute on playback should be off
      await verifyToggleOnOff(driver, 'mediaMute', false);
    });
    
    it('Global mute should be disabled in ACP', async () => {
      await switchBrowserTab(driver, 0);
      await verifyToggleOnOff(driver, 'mediaMute', false);
    });
  });
  });

 
