describe('TC30.1.7: Menu: Move to top/Move to bottom', () => {
  it('should click on Menu next to the name of the participant', async () => {
    //second participant is clicked because for his Move to top option is useful
    await clickButton(driver, 'ParticipantMoreMenu-Button', 3);
  });

  it('should select Move to top - the participant is on the top within its role', async () => {
    const userParticipants = await driver.findElements(By.css('[data-test-span="ParticipantNickname-Span"]'));
    //the first is host, two others are participants
    //get positions before click
    const firstParticipant = await userParticipants[1].getText();
    const secondParticipant = await userParticipants[2].getText();
    await clickButtonCss(driver, '[data-test-id="MoveToTop-MenuItemButton"]');
    //for browser to be ready
    await waitBrowserUntilReady(driver);
    // get the positions again after moving the second user to the top
    const firstParticipantAfterClick = await userParticipants[1].getText();
    const secondParticipantAfterClick = await userParticipants[2].getText();
    expect(firstParticipant).toBe(secondParticipantAfterClick);
    expect(secondParticipant).toBe(firstParticipantAfterClick);
  });
  
  
  it('should verify that position of the tile representing that user in the experience changes accordingly', async () => {
    const peers = await driver.findElements(By.css('[data-test-id="Peer"]'));
    const nameOnPeer = await peers[1].findElement(By.css('[data-test-id="nickname"]'));
    await driver.wait(until.elementTextIs(nameOnPeer, userNormal2), 10000);
  });
  
  
  it('should select Move to bottom - the participant is on the bottom within its role', async () => {
    //click Menu for the first participant
    await clickButton(driver, 'ParticipantMoreMenu-Button', 2);
    const userParticipants = await driver.findElements(By.css('[data-test-span="ParticipantNickname-Span"]'));// get the position of users before clicking
    const firstParticipant = await userParticipants[1].getText();
    const secondParticipant = await userParticipants[2].getText();
    await clickButtonCss( driver, '[data-test-id="MoveToBottom-MenuItemButton"]');
    //for browser to be ready
    await waitBrowserUntilReady(driver);
    // get the positions again after moving the user to the bottom
    const firstParticipantAfterClick = await userParticipants[1].getText();
    const secondParticipantAfterClick = await userParticipants[2].getText();
    expect(firstParticipant).toBe(secondParticipantAfterClick);
    expect(secondParticipant).toBe(firstParticipantAfterClick);
  });
  
  it('should verify that position of the tile representing that user in the experience changes accordingly', async () => {
    const peers = await driver.findElements(By.css('[data-test-id="Peer"]'));
    const nameOnPeer = await peers[2].findElement(By.css('[data-test-id="nickname"]'));
    await driver.wait(until.elementTextIs(nameOnPeer, userNormal2), 10000);
  });
});
